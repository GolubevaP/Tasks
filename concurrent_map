/*
class ConcurrentMap - splits the map into several maps with a non-overlapping set of keys and protects each of them with a separate mutex.

ConcurrentMap's keys can only be integers in this implementation.
Constructor takes the number of maps, into which it is necessary to divide the entire space of keys.
Access operator[](const K& key) - acting like map's operator[], return Access structure.
Struct Access - provides a reference to the map value and keeps synchronized access.
map<K, V> BuildOrdinaryMap() - return entire map.
*/

#include <future>
#include <map>
#include <vector>
using namespace std;

template <typename T>
T Abs(T x) {
  return x < 0 ? -x : x;
}

template <typename K, typename V>
class ConcurrentMap {
public:
  static_assert(is_convertible_v<K, uint64_t>, "ConcurrentMap supports only integer keys");

  struct Access {
    lock_guard<mutex> guard;
    V& ref_to_value;

    Access(const K& key, pair<mutex, map<K, V>>& bucket_content)
      : guard(bucket_content.first)
      , ref_to_value(bucket_content.second[key])
    {
    }
  };

  explicit ConcurrentMap(size_t bucket_count)
    : data(bucket_count)
    , bucket_count(bucket_count) {}

  Access operator[](const K& key) {
    auto& bucket = data[Abs(key) % bucket_count];
    return {key, bucket};
  }

  map<K, V> BuildOrdinaryMap() {
    map<K, V> result;
    for (auto& [mtx, m] : data) {
      auto g = lock_guard<mutex>{mtx};
      result.insert(begin(m), end(m));
    }
    return result;
  }

private:
  vector<pair<mutex, map<K, V>>> data;
  size_t bucket_count;
};
